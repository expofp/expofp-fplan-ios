// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ExpoFpFplan
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ExpoFpCommon
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct Point : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Int
  public let y: Swift.Int
  public init(x: Swift.Int, y: Swift.Int)
  public static func == (p1: ExpoFpFplan.Point, p2: ExpoFpFplan.Point) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct Route : Swift.Equatable {
  public let from: Swift.String
  public let to: Swift.String
  public let exceptInaccessible: Swift.Bool
  public init(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool)
  public static func == (r1: ExpoFpFplan.Route, r2: ExpoFpFplan.Route) -> Swift.Bool
}
public struct Details : Swift.Decodable {
  public let id: Swift.Int
  public let type: Swift.String
  public let name: Swift.String
  public let externalId: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct BlueDotPoint : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Double?
  public let y: Swift.Double?
  public let z: Swift.String?
  public let angle: Swift.Double?
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public init(x: Swift.Double? = nil, y: Swift.Double? = nil, z: Swift.String? = nil, angle: Swift.Double? = nil, latitude: Swift.Double? = nil, longitude: Swift.Double? = nil)
  public static func == (p1: ExpoFpFplan.BlueDotPoint, p2: ExpoFpFplan.BlueDotPoint) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct Configuration : Swift.Codable {
  public let androidHtmlUrl: Swift.String?
  public let iosHtmlUrl: Swift.String?
  public let enablePositioningAfter: Foundation.Date?
  public let disablePositioningAfter: Foundation.Date?
  public init(androidHtmlUrl: Swift.String?, iosHtmlUrl: Swift.String?, enablePositioningAfter: Foundation.Date?, disablePositioningAfter: Foundation.Date?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension ExpoFpFplan.FplanUiKitView {
  @_Concurrency.MainActor(unsafe) public func setOnFpReadyCallback(_ callback: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func setOnBoothClickCallback(_ callback: @escaping (_ boothName: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func setOnBuildDirectionCallback(_ callback: @escaping (_ direction: ExpoFpFplan.Direction) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func setOnMessageReceivedCallback(_ callback: @escaping (_ message: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, locationProvider: ExpoFpCommon.LocationProvider? = nil)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, locationProvider: ExpoFpCommon.LocationProvider? = nil, configuration: ExpoFpFplan.Configuration? = nil)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, useGlobalLocationProvider: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, useGlobalLocationProvider: Swift.Bool = false, configuration: ExpoFpFplan.Configuration? = nil)
  @_Concurrency.MainActor(unsafe) public func destoy()
  @_Concurrency.MainActor(unsafe) public func selectExhibitor(_ exhibitorName: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func selectBooth(_ boothName: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func selectRoute(_ route: ExpoFpFplan.Route?)
  @_Concurrency.MainActor(unsafe) public func setCurrentPosition(_ position: ExpoFpFplan.BlueDotPoint?, _ focus: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func clear()
}
extension ExpoFpFplan.FplanUiKitView : ExpoFpCommon.LocationProviderDelegate {
  @_Concurrency.MainActor(unsafe) public func didUpdateLocation(location: ExpoFpCommon.Location)
  @_Concurrency.MainActor(unsafe) public func didStartSuccess()
  @_Concurrency.MainActor(unsafe) public func didStartFailure(reason: Swift.String)
  @_Concurrency.MainActor(unsafe) public func didStopSuccess()
  @_Concurrency.MainActor(unsafe) public func didStopFailure(reason: Swift.String)
}
public struct FileInfo : Swift.Codable {
  public let name: Swift.String
  public let serverUrl: Swift.String
  public let cachePath: Swift.String
  public let version: Swift.String
  public init(name: Swift.String, serverUrl: Swift.String, cachePath: Swift.String, version: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_Concurrency.MainActor(unsafe) public struct FplanView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: ExpoFpFplan.FplanView.Context) -> ExpoFpFplan.FplanUiKitView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: ExpoFpFplan.FplanUiKitView, context: ExpoFpFplan.FplanView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = ExpoFpFplan.FplanUiKitView
}
public struct Helper {
  public static func getEventAddress(_ url: Swift.String) -> Swift.String
  public static func getParams(_ url: Swift.String) -> Swift.String
  public static func getEventId(_ url: Swift.String) -> Swift.String
  public static func saveConfiguration(_ configuration: ExpoFpFplan.Configuration, fplanConfigPath: Foundation.URL) throws
  public static func parseConfigurationJson(_ json: Foundation.Data) throws -> ExpoFpFplan.Configuration
  public static func loadConfiguration(fplanConfigPath: Foundation.URL) throws -> ExpoFpFplan.Configuration
  public static func loadConfiguration(_ configuration: ExpoFpFplan.Configuration?, fplanConfigUrl: Foundation.URL, callback: @escaping ((_ configuration: ExpoFpFplan.Configuration) -> Swift.Void))
  public static func getDefaultConfiguration() -> ExpoFpFplan.Configuration
  public static func getCacheDirectory() -> Foundation.URL
}
extension ExpoFpFplan.FplanView {
  @_Concurrency.MainActor(unsafe) public func onFpReady(_ callback: @escaping () -> Swift.Void) -> ExpoFpFplan.FplanView
  @_Concurrency.MainActor(unsafe) public func onBoothClick(_ callback: @escaping (_ boothName: Swift.String) -> Swift.Void) -> ExpoFpFplan.FplanView
  @_Concurrency.MainActor(unsafe) public func onBuildDirection(_ callback: @escaping (_ direction: ExpoFpFplan.Direction) -> Swift.Void) -> ExpoFpFplan.FplanView
  @_Concurrency.MainActor(unsafe) public func onMessageReceived(_ callback: @escaping (_ message: Swift.String) -> Swift.Void) -> ExpoFpFplan.FplanView
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, locationProvider: ExpoFpCommon.LocationProvider? = nil)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, locationProvider: ExpoFpCommon.LocationProvider? = nil, configuration: ExpoFpFplan.Configuration? = nil)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, useGlobalLocationProvider: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, useGlobalLocationProvider: Swift.Bool = false, configuration: ExpoFpFplan.Configuration? = nil)
  @_Concurrency.MainActor(unsafe) public func destoy()
  @_Concurrency.MainActor(unsafe) public func selectExhibitor(_ exhibitorName: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func selectBooth(_ boothName: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func selectRoute(_ route: ExpoFpFplan.Route?)
  @_Concurrency.MainActor(unsafe) public func setCurrentPosition(_ position: ExpoFpFplan.BlueDotPoint?, _ focus: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func clear()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FSWebView : WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FplanUiKitView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
public struct Line {
  public let startPoint: ExpoFpFplan.Point
  public let endPoint: ExpoFpFplan.Point
  public let weight: Swift.Int
}
public struct Booth : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct Direction {
  public let distance: Swift.String
  public let duration: Foundation.TimeInterval
  public let from: ExpoFpFplan.Booth
  public let to: ExpoFpFplan.Booth
  public let lines: [ExpoFpFplan.Line]
}
